__doc__ =  "File calculates and plots the braking parameters of a vehicle."

#import system libs
import argparse

#required imports
import matplotlib.pyplot as plt
import numpy as np
import scipy.constants as syc

def calculate_braking_parameters(mass: any, velocity: any, friction: any):
  """
  Calculates and plots the braking parameters of a vehicle.

  Args:
      mass (int): Mass of the vehicle in kilograms.
      velocity (float): Speed of the vehicle in meters per second.
      friction (float): Coefficient of friction.

  Returns:
      None
  """
  # Calculation of the time until the vehicle stops
  stop_time = velocity / (friction * syc.g)
  # Setting time intervals in steps of 0.1 seconds
  time = np.arange(0.0, stop_time, 0.1)
  # Calculation of the braking speed at the time 'time'
  actual_velocity = velocity - (friction * syc.g) * time
  # Calculation of the distance at the time 'time'
  actual_distance = velocity * time - (friction*syc.g * time ** 2) / 2

  # Rule of Thumb: calculation of normal braking distance 'normal'
  braking_distance_normal = (velocity * 3.6 / 10) ** 2
  # Rule of Thumb: calculation of normal braking distance 'danger'
  braking_distance_danger = ((velocity * 3.6 / 10) ** 2) * 0.5
  # Rule of Thumb: calculation of normal braking distance 'reaction'
  braking_distance_reaction = ((velocity * 3.6 / 10) ** 2) * 3
  print(f"Mass: {mass} kg\n"
        f"Velocity: {velocity} m/s\n"
        f"Friction: {friction}\n\n"
        f"Rule of Thumb:\n"
        f"Breaking distance normal: {braking_distance_normal} meters\n"
        f"Breaking distance danger: {braking_distance_danger} meters\n"
        f"Breaking distance reaction: {braking_distance_reaction} meters\n")

  # Creating two subplots
  fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))
  # Plotting current speed in the first subplot
  ax1.plot(time, actual_velocity, color ="blue", lw = 1)
  # Plotting current distance in the second subplot
  ax2.plot(time, actual_distance, color ="red", lw = 1)

  ax1.set_xlabel("time [s]")
  ax1.set_ylabel("Velocity [m/s]")
  ax2.set_xlabel("time [s]")
  ax2.set_ylabel("Distance [m]")
  # Adding grid lines to both plots
  for ax in [ax1, ax2]:
    ax.grid(True)

  # Adding a plot label
  fig.suptitle("Coding Assingment S2310710020", fontweight ="bold")
  # Saving the plot as a PDF
  plt.savefig("S2310710020.pdf")
  # Displaying the plot
  plt.show()

def main():
  """
  Main function for parsing arguments and calling the calculation function.
  """
  parser = argparse.ArgumentParser(description=
                                    "Calculates and plots braking behavior.")
  parser.add_argument("mass", type=int, help="Vehicle mass in kg")
  parser.add_argument("velocity", type=float, help="Vehicle speed in m/s")
  parser.add_argument("friction", type=float, default=0.65,
                      help="Coefficient of friction")
  args = parser.parse_args()

  # Calling the function calculate_and_plot
  calculate_braking_parameters(args.mass, args.velocity, args.friction)

# Calling the main function
main()
